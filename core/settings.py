"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""


from pathlib import Path
import os
import environ
from datetime import timedelta

import gspread

from google.oauth2.service_account import Credentials

from oauth2_provider import settings as oauth2_settings

# initiazlizing environment variables
# env = environ.Env()
# environ.Env.read_env()
env = os.getenv

# APP URL
APP_URL = env('APP_URL')

# APP NAME
APP_NAME = env("APP_NAME")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# MASTER_BASE_DIR = os.path.dirname(__file__).resolve().parent
MASTER_BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('APP_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False if env('APP_DEBUG') == "false" else True


# ALLOWED_HOSTS = ["127.0.0.1", "127.0.0.1:3010", 'www.127.0.0.1:3010', '13.60.49.220', 'www.13.60.49.220', "backendapi.coffeemapcompany.com", "www.backendapi.coffeemapcompany.com", "backendapi.coffeemapcompany" ]
# ALLOWED_HOSTS = env('ALLOWED_HOSTS').split(' ')
# ALLOWED_HOSTS = [os.environ['WEBSITE_HOSTNAME'],os.environ['CUSTOM_HOSTNAME']]
ALLOWED_HOSTS = ["*"]


# Allowed origin
CORS_ALLOWED_ORIGINS = env('CORS_ALLOWED_ORIGINS').split(' ')


SECURE_SSL_REDIRECT = \
    env('SECURE_SSL_REDIRECT') == "true"
if SECURE_SSL_REDIRECT:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
# FRONTEND_SERVER_URL = env("REACT_SERVER_LOCAL")

# GOOGLE SHEETS API
GOOGLE_SHEET_SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
GOOGLE_SHEET_CREDENTIALS_DATA = {
            "type": env("GOOGLE_TYPE"),
            "project_id": env("GOOGLE_PROJECT_ID"),
            "private_key_id": env("GOOGLE_PRIVATE_KEY_ID"),
            "private_key": env("GOOGLE_PRIVATE_KEY").replace('\\n', '\n'),
            "client_email": env("GOOGLE_CLIENT_EMAIL"),
            "client_id": env("GOOGLE_CLIENT_ID"),
            "auth_uri": env("GOOGLE_AUTH_URI"),
            "token_uri": env("GOOGLE_TOKEN_URI"),
            "auth_provider_x509_cert_url": env("GOOGLE_AUTH_PROVIDER_X509_CERT_URL"),
            "client_x509_cert_url": env("GOOGLE_CLIENT_X509_CERT_URL"),
            "universe_domain": env("GOOGLE_UNIVERSE_DOMAIN")
        }
GOOGLE_SHEET_CREDENTIALS = Credentials.from_service_account_info(GOOGLE_SHEET_CREDENTIALS_DATA, scopes=GOOGLE_SHEET_SCOPES)
GOOGLE_SHEET_CLIENT = gspread.authorize(GOOGLE_SHEET_CREDENTIALS)
# print(GOOGLE_SHEET_CREDENTIALS_DATA)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    # 'rest_framework_simplejwt',
    # oauth2 apps
    'oauth2_provider',
    'social_django',
    'drf_social_oauth2',
    
    'django_filters',
    'storages',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
                # oauth2 context_processors
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        
        # 'oauth2_provider.ext.rest_framework.OAuth2Authentication',  # django-oauth-toolkit < 1.0.0
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',  # django-oauth-toolkit >= 1.0.0
        'drf_social_oauth2.authentication.SocialAuthentication',
    )
}

# AUTH BACKENDS
AUTHENTICATION_BACKENDS = (
    
    # Google  OAuth2
    'social_core.backends.google.GoogleOAuth2',
    
    # Facebook OAuth2
    'social_core.backends.facebook.FacebookAppOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',

    # drf_social_oauth2
    'drf_social_oauth2.backends.DjangoOAuth2',

    # Django
    'django.contrib.auth.backends.ModelBackend',
    
    # "allauth.account.auth_backends.AuthenticationBackend",
)


# expires in 6 months
oauth2_settings.DEFAULTS['ACCESS_TOKEN_EXPIRE_SECONDS'] = 3600 * 24 # 1 month token expiry date

# DEFAULT PASSWORD BASED SYSTEM SECURITY CREDENTIALS
DEFAULT_AUTH_CLIENT_KEY=env('DEFAULT_AUTH_CLIENT_KEY')
DEFAULT_AUTH_CLIENT_SECRET=env('DEFAULT_AUTH_CLIENT_SECRET')

# SOCIAL AUTH CONFIG

# Facebook configuration
SOCIAL_AUTH_FACEBOOK_KEY = env('SOCIAL_AUTH_FACEBOOK_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = env('SOCIAL_AUTH_FACEBOOK_SECRET')

# Define SOCIAL_AUTH_FACEBOOK_SCOPE to get extra permissions from Facebook.
# Email is not sent by default, to get it, you must request the email permission.
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id, name, email'
    # picture'
}

SOCIAL_AUTH_USER_FIELDS=['email','fullname','password']

# Google configuration
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

# Define SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE to get extra permissions from Google.
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]


# Email Settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("MAIL_HOST")
EMAIL_PORT = env("MAIL_PORT")
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env("MAIL_FROM_ADDRESS")
EMAIL_HOST_PASSWORD = env("MAIL_PASSWORD")
EMAIL_FROM_NAME = env("MAIL_FROM_NAME")



# SETTING CUSTOM USER MODEL
PASSWORD_RESET_TIMEOUT = 900 # 900 sec == 15 min

AUTH_USER_MODEL = "api.UserModel"

ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'


# LOGIN_REDIRECT_URL = "/dashboard"
# LOGOUT_REDIRECT_URL = "/login"
if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': os.path.join(BASE_DIR, "debug.log"),
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': 'DEBUG',
                'propagate': True,
            },
        },
    }



# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env('DB_DRIVER'),
        'NAME': env('DB_DATABASE'),
        'USER': env('DB_USERNAME'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST':env('DB_HOST'),
        'PORT':env('DB_PORT'),
        'CONN_MAX_AGE': 600,  # 10 minutes
        "OPTIONS": {
            'driver': 'ODBC Driver 17 for SQL Server',  # Make sure to have the appropriate ODBC driver installed
            'extra_params': 'Encrypt=yes;TrustServerCertificate=no',
        } if env("DB_DRIVER") == "mssql" else {},
    }
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    
    # 'mysql': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'smartcricstats',
    #     'USER': 'root',
    #     'PASSWORD': '',
    #     'HOST':'localhost',
    #     'PORT':'3306',
    # }
    
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': env('DB_DATABASE'),
    #     'USER': env('DB_USERNAME'),
    #     'PASSWORD': env('DB_PASSWORD'),
    #     'HOST':env('DB_HOST'),
    #     'PORT':env('DB_PORT'),
    # }
}
  


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, "cache"),
        'TIMEOUT': None,
        'OPTIONS': {
            'MAX_ENTRIES': 5000
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

#   STORAGES
# Add compression and caching support
# STORAGES = {
#     # ...
#     # "default": {
#     #     "BACKEND": "storages.backends.s3boto3.S3Boto3Storage"
#     # },
#     "staticfiles": {
#         "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
#     },
# }

# Serving files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
USE_CLOUD_STORAGE = env("USE_CLOUD_STORAGE")
if USE_CLOUD_STORAGE == "aws":
    # S3 BUCKET
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_BUCKET_NAME')
    AWS_S3_SIGNATURE_NAME = 's3v4'
    AWS_S3_REGION_NAME = env('AWS_DEFAULT_REGION')
    # AWS_S3_FILE_OVERWRITE = False
    # AWS_DEFAULT_ACL =  None
    AWS_S3_VERITY = True
    
    # PREPARING ROUTES
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    
    # s3 static settings
    # STATIC_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
    # setting static files backend
    STATICFILES_STORAGE = 'api.backends.StaticStorage'
    
    # s3 public media settings
    # PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
    # setting media files backend
    DEFAULT_FILE_STORAGE = 'api.backends.PublicMediaStorage'

elif USE_CLOUD_STORAGE == "azure":
    DEFAULT_FILE_STORAGE = 'api.backends.AzureMediaStorage'
    STATICFILES_STORAGE = 'api.backends.AzureStaticStorage'

    AZURE_ACCOUNT_NAME = env('AZURE_STORAGE_ACCOUNT_NAME')
    AZURE_ACCOUNT_KEY = env('AZURE_STORAGE_ACCOUNT_KEY')
    AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'

    STATIC_URL = f'https://{AZURE_CUSTOM_DOMAIN}/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'public') 
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static')
    ]
    MEDIA_URL = f'https://{AZURE_CUSTOM_DOMAIN}/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    STATIC_URL = '/static/' # through this user will access the static files
    
    # in production server all files from all apps will be copied to this place for serve
    STATIC_ROOT = os.path.join(BASE_DIR, 'public') 
    print(BASE_DIR)
    # cpanel
    # django should look in this folder for user managed static files
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static')
    ]

    # through this user will be able to access the media files in the storage
    MEDIA_URL = '/media/'
    # in this directory django should look for media files
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Adjusted path for media files


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}